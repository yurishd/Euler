#include <iostream>

using namespace std;

template <typename T>
struct Node_t
{
  Node_t(Node_t<T> *pParent);
  ~Node_t();

  T get_node_value() const;

private:
  Node_t *m_pParent;
  Node_t *m_pLeft;
  Node_t *m_pRight;
protected:
  T     m_data;
};

struct NodeData_t
{
  int m_Weight;
  int m_PathWeight;

  NodeData_t();
};

struct IntTreeNode_t : public Node_t<NodeData_t>
{
  IntTreeNode_t(IntTreeNode_t *pParent, int weight);

  void SetPathWeight(int pathWeight)
  int getFullWeight() const;
}

int main(int argc, char *argv[])
{

  Node_t<int> root;

  long result = 1;
  cout << result << endl;
  return 0;
}

template <typename T>
Node_t<T>::Node_t(Node_t<T> *pParent)
  : m_pParent(pParent), m_pLeft(0), m_pRight(0)
{}

template <typename T>
Node_t<T>::~Node_t()
{ delete m_pLeft; delete m_pRight; }

template <typename T>
T Node_t<T>::get_node_value() const
{ return m_data; }

NodeData_t::NodeData_t()
  : m_Weight(0), m_PathWeight(0)
{}

IntTreeNode_t::IntTreeNode_t(IntTreeNode_t *pParent, int weight)
  :  Node_t<NodeData_t>(pParent)
{ this->m_data.m_Weight = weight; }

void IntTreeNode_t::SetPathWeight(int pathWeight)
{ this->m_data.m_PathWeight = pathWeight; }

int IntTreeNode_t::getFullWeight() const
{ return this->m_data.m_Weight + this->m_data.m_PathWeight; }

